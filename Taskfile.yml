version: '3'

tasks:
  # Checks

  ck_openssl:
    internal: true
    silent: true
    desc: Checks if openssl is installed and that the version is 3 or higher
    preconditions:
      - sh: command -v openssl
        msg: "Openssl not installed OR not available in PATH."
      - msg: "OpenSSL not version 3.0.0 or higher"
        sh: |
          VERSION=$(openssl version | awk '{ print $2 }')
          MAJOR_VERSION=$(echo $VERSION | awk -F $'.' '{ print $1 }')
          if [ $MAJOR_VERSION -lt 3 ]; then
            exit 1
          fi

  ck_configured:
    internal: true
    silent: true
    desc: Checks if config.conf file exists (templated from config.conf.sample). Also checks to ensure necessary dirs exist.
    preconditions:
      - sh: test -f config.conf
        msg: "config.conf file not populated. Did you copy config.conf.sample to config.conf?"
    cmds:
      - mkdir -p ca

  ck_ca_generated:
    internal: true
    silent: true
    desc: "Checks if root Certificate Authorirty generated"
    preconditions:
      - sh: test -f ca/ca.crt
        msg: "Certificate authority materials must be generated before running this task. Hint: `task genca`"

  # Meat and Potatoes (yum!)

  default:
    silent: true
    cmds:
      - task --list

  genca:
    desc: "Generates root certificate authority, writing these materials to `ca/ca/` directory"
    deps: [
      ck_openssl,
      ck_configured
    ]
    silent: true
    cmds:
      - echo ---------- Generating Root CA private key ----------
      - openssl genrsa -out ca/ca.key 4096
      - echo ---------- Signing Root CA public key ----------
      - openssl req -x509 -new -sha512 -key ca/ca.key -days 3650 -config ca.conf -out ca/ca.crt
      - echo ---------- SUMMARY ----------
      - echo
      - echo ">>>>> Root CA Private key - ca/ca/ca.key"
      - echo ">>>>> Root CA Public key - ca/ca/ca.crt"

  gencert:
    desc: "Generates a private key and a Certificate Signing Requestg (CSR) for the Common Name passed as a parameter via `task gencert -- <CommonName>` "
    deps: [
      ck_openssl,
      ck_configured,
      ck_ca_generated
    ]
    silent: true
    vars:
      CN: "{{- .CLI_ARGS -}}"
      SUBJECT: "/CN={{- .CLI_ARGS -}}"
    preconditions:
      - sh: test ! -z "{{.SUBJECT}}"
        msg: "This task requires parameters. Hint: `task gencert -- <CommonName>`"
    cmds:
      - mkdir -p ca/{{.CN}}
      - openssl genrsa -out ca/{{.CN}}/private.key 4096
      - echo ---------- Generating Certificate Signing Request for {{.CN}} ----------
      - openssl req -new -key ca/{{.CN}}/private.key -sha256 -out ca/{{.CN}}/private.csr -subj {{.SUBJECT}}
      - echo ---------- Signing {{.CN}} using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/{{.CN}}/private.csr -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -days 730 -sha256 -out ca/{{.CN}}/public.crt
      - echo ---------- CERT DETAILS ----------
      - openssl x509 -in ca/{{.CN}}/public.crt -noout -text
      - echo
      - echo ---------- SUMMARY ----------
      - echo
      - echo ">>>>> Root CA Private key - ca/ca.key"
      - echo ">>>>> Root CA Public key / Certificate - ca/ca.crt"
      - echo ">>>>> Certificate Common Name - {{.CN}}"
      - echo ">>>>> Certificate Subject - {{.SUBJECT}}"
      - echo ">>>>> Subject Private Key - ca/{{.CN}}/private.key"
      - echo ">>>>> Subject Public Key / Certificate - ca/{{.CN}}/public.crt"

  obliterate:
    silent: true
    desc: Cleans up the workspace for generating a new hierarchy.
    prompt: |
      !! WARNING !!
      THIS IS A DESTRUCTIVE OPERATION that will destroy the certificate hierarchy written into this workspace.
      If you haven't backed up the contents of the ca/ folder, this will obliterate any chance of
      generating new certificates.
      In other words...
      Bad stuff will happen. ESPECIALLY IF YOU IGNORE THIS MSG.
      !! WARNING !!
    dir: ca/
    cmds:
      - rm -rf ca/
